From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Fri, 24 Apr 2020 09:06:15 -0700
Subject: [PATCH] Make CallbackExecutor strict again

The correct fix for double scheduling is to avoid it. The reason
this class is used is because double scheduling causes issues
elsewhere, and it acts as an explicit detector of what double
schedules. Effectively, use the callback executor as a tool of
finding issues rather than hiding these issues.

This patch also reverts incorrect use(s) of the class by paper.

- getChunkFutureAsynchronously
  There is no risk at all of recursion. The future is executed on
  the chunk provider's thread queue, the same place general plugin
  load callbacks are executed on. Forcing the task execution into
  the callback executor also prevents the future from catching
  any exception thrown from it.

diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 1cbed1a6f71524f8bab0b0f8b13a67453c2d0329..e33a370f92b5a3d2707b42e6d08269067ca86e5b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -181,32 +181,29 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     public final CallbackExecutor callbackExecutor = new CallbackExecutor();
     public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
 
-        // Paper start - replace impl with recursive safe multi entry queue
-        // it's possible to schedule multiple tasks currently, so it's vital we change this impl
-        // If we recurse into the executor again, we will append to another queue, ensuring task order consistency
-        private java.util.Queue<Runnable> queue = new java.util.ArrayDeque<>(); // Paper - remove final
+        // Tuinity start - revert paper's change
+        private Runnable queued;
 
         @Override
         public void execute(Runnable runnable) {
             org.spigotmc.AsyncCatcher.catchOp("Callback Executor execute");
-            if (this.queue == null) {
-                this.queue = new java.util.ArrayDeque<>();
+            if (queued != null) {
+                MinecraftServer.LOGGER.fatal("Failed to schedule runnable", new IllegalStateException("Already queued")); // Paper - make sure this is printed
+                throw new IllegalStateException("Already queued");
             }
-            this.queue.add(runnable);
+            queued = runnable;
         }
+        // Tuinity end - revert paper's change
 
         @Override
         public void run() {
             org.spigotmc.AsyncCatcher.catchOp("Callback Executor run");
-            if (this.queue == null) {
-                return;
-            }
-            java.util.Queue<Runnable> queue = this.queue;
-            this.queue = null;
-            // Paper end
-            Runnable task;
-            while ((task = queue.poll()) != null) { // Paper
+            // Tuinity start - revert paper's change
+            Runnable task = queued;
+            queued = null;
+            if (task != null) {
                 task.run();
+                // Tuinity end - revert paper's change
             }
         }
     };
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 1ace8a2adfdbb8ab99dbf500380259b78f79be95..9c426682d70856e6be962804a32a4f188a6d99e9 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -202,9 +202,9 @@ public class ServerChunkCache extends ChunkSource {
 
                 try {
                     if (onLoad != null) {
-                        chunkMap.callbackExecutor.execute(() -> {
+                        // Tuinity - revert incorrect use of callback executor
                             onLoad.accept(either == null ? null : either.left().orElse(null)); // indicate failure to the callback.
-                        });
+                        // Tuinity - revert incorrect use of callback executor
                     }
                 } catch (Throwable thr) {
                     if (thr instanceof ThreadDeath) {
